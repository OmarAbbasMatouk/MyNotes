LECTURE 1 : int main function and types of how to write on it

24278242mm
LECTURE 2 : TYPES of COmments 

{ One line comment = //one line comment}
{ Multi Line comment = /**/} > Example = /* Omar
						is 
						Happy */


LECTURE 3 : Errors and Warnings

* 3 Types Of Errors 

1) Compile time errors

2) Runtime errors

3) Warnings


# Compiler Error Example : int main() { std::cout << "hello" << std:endl
					return 0;}
There is no (;) before Return 0 
Thats the compiler Error

# Runtime Errors Example : you cant divide by 0


LECTURE 4 : Statments And Functions

# Statements Must end with (;)

# Functions (Sum-Multi - Divide)

@Example 
int addOmar(int firstOmar, int secondomar) {
	int result = firstOmar + secondomar;
	return result;
}

You can use this function anytime with any numbers %Example

int addOmar(int firstOmar, int secondomar) {
	int result2 = firstOmar * secondomar;
	return result2;
}
int main() {

	int sum1 = addOmar(30, 21);
	std::cout << "Sum = " << sum1 << std::endl;

	int sum2 = addOmar(3131, 39990);
	std::cout << " Sum of two Bitches =  " << sum2 << std::endl;
	return 0;

}



Also you can run this program without typing all of these By just typing this

std::cout << "Sum = " << addOmar(3,97) << std::endl;
return 0;

this function will give sum = 100



LECTURE 5 = input and Output

# std TYPES {
1) std::cout  (Printing data to the console)
2) std::cin   (Reading data from the terminal)
3) std::cerr  (Printin errors to the console )
4) std::clog  (Printing log messages to the console)
}

#Example :

int main() {

	int old1{};
	std::string name;
	std::cout << "please fill up your name : " << std::endl;
	std::cin >> name;
	std::cin >> old1;

	std::cout << "Hello  " << name << " You are = " << old1 << "  Years" << std::endl;


	return 0;
}

# To make Full Name 

int main() {


	std::string full_name;
	int age23;
	std::cout << "Please type your full name and age " << std::endl;
	std::getline(std::cin, full_name);
	std::cin >> age23;
	std::cout << "Hello " << full_name << " your age is " << age23 << " thanks for giving us information about yourself" << std::endl;

	return 0;


}


LECTURE 6 = C++ Program EXC model

LECTURE 7 = C++ CORE LANGUAGE

LECTURE 8 = Variables and Data Types

# C++ Predefines Are many TYPES 
	1) int
	2) double
	3) float
	4) char
	5) bool
	6) void 	7) auto

LECTURE 9 = Number Systems

# Hexa - Binary - Decimal 

# Binary = Base 2
# Decimal = Base 10
# Hexa = Base 16

@  Example of number systems
int main() {
	int number1 = 15; //Decimal
	int number2 = 017; // Octal
	int number3 = 0x0f; // Hexadecimal
	int number4 = 0b00001111; // Binary
	std::cout << "Hello Brother " << std::endl;
	std::cout << "Number 1 is :  " << number1 << std::endl;
	std::cout << "Number 2 is :  " << number2 << std::endl;
	std::cout << "Number 3 is :  " << number3 << std::endl;
	std::cout << "Number 4 is :  " << number4 << std::endl;
	return 0;
}
 After this trial we found that all numbers we got is 15 , so they changed all numbers to decimal


LECTURE 9 = Integers 

int main(){
	int elephant;
	int lion{ 32 };
	int dogs{ 33 };
	int cats{ 19 };
	int shits{ lion + dogs };

	std::cout << "Hello How many Lion and dogs = " << shits << std::endl;
	return 0;
}


# EXAMPLES OF INTEGERS All in ONe


int main() {
	// braced example ({})
	int elephant;
	int lion{ 32 };
	int dogs{ 33 };
	int cats{ 19 };
	int shits{ lion + dogs + cats };
	std::cout << "Hello How many Lion and dogs = " << shits << std::endl;
  

	// Functional initialization (()) , less safe than {} and it will give error if u used it

	int abbas(3.1);
	int omar(3.24);
	int med7at(19.1);
	int sum(abbas + omar);
	int narrow(2.99);
	// it will not give you the full number

	std::cout << "hello omar and abbas how much money you have    =  " << narrow << "  thanks and you med7at  " << sum << std::endl;
	

	// Assignment initilization (=)
	int bike = 32;
	int car = 15;
	int sum2 = bike + car;
	int na = 2.9;
	// cant use decimal numbers there na
	std::cout << "Na =  " << na << " and sum of bikes and cars  =  " << sum2 << std::endl;


	return 0;															 
}	

LEC 10 = integer Modifiers


// Negative and positive numbers
int main() {

	int number1 = 32;
	int number2 = -32;
	int zero = number1 + number2;
	std::cout << "Zero =   " << zero << std::endl;
	return 0;
}

// Short and Long - Signed and Unsigned
int main() {
	short shortnumber{ -32768 }; // 2 Bytes
	short int shortx2{ 455 };
	signed short s_igned{ 122 };
	signed short int s_ignedshortint{ -456 };
	unsigned short int un_signedshortint{421};
	unsigned int value0{413};
	long int value{ 99992 }; // 4 bytes
	long long signed value2{ 312 }; // 8 bytes
	// unsigned will give compiler error because its unsigned function and it can store positive numbers
	std::cout << "value is   " << sizeof(shortnumber) << std::endl;
	return 0;
}


# int = 4 bytes
# short = 2 Bytes
# Long = 4 bytes
# long long = 8 bytes


LEC 11 = Fractional Numbers

# Fractional Types

   TYPES             Size              Precision 

1) Float             4                   7                  
2) Double            8                   15            
3) Long Double       12                  >double            
  	


	//Example 1
int main() { 
	
	float number1{1.12345678901234567890f}; // 4 bytes
	double number2{ 1.12345678901234567890 }; // 8 bytes
	long double number4 {1.12345678901234567890L}; // 12 > double bytes
	std::cout << " Size of 1 =  " << sizeof(number1) << std::endl;
	std::cout << " Size of 2 =  " << sizeof(number2) << std::endl;
	std::cout << " Size of 3 =  " << sizeof(number4) << std::endl;
	// Precision Test 
	std::cout << std::setprecision(15); // Control the precision from std::cout
	std::cout << " Size of 1 =  " << number1 << std::endl; // 7 Digits
	std::cout << " Size of 2 =  " << number2 << std::endl; // 15 digits
	std::cout << " Size of 3 =  " << number4 << std::endl; // 15+ digits
	// Float problems the precision is too limited
	float number5{ 192400023.0f }; // f represent float
	double number6{ 192400023.0 }; // 0 represent double
	long double number7{ 192400023.0L }; // L represent Long Double
	std::cout << " number 5 is  " << number5 << std::endl;
	std::cout << " number 6 is  " << number6 << std::endl;
	std::cout << " number 7 is  " << number7 << std::endl;


	// Example 2 (NaN - Infinity )
	double number1{ 5.6 };
	double number2{};
	double number3{};
	//Infinity
	double result{ number1 / number2 };
	std::cout << number1 << "/" << number2 << " yields " << result << std::endl;
	std::cout << result << "  +  " << number1 << " yields " << result + number1 << std::endl;
	//NaN
	result = number2 / number3;
	std::cout << number2 << "/" << number3 << " = " << result << std::endl;
	return 0;
}
 	#Press Debug (Example 2) =  
 5.6/0 yields inf
inf  +  5.6 yields inf
0/0 = -nan(ind)


// LEC 12 = Booleans (True,False)
// Example
int main() {
	bool Red{ true }; 
	bool green{ false };
	if (Red == true) {
		std::cout << " Fake ! " << std::endl;
	}
	else
	{
		std::cout << " Trusted ! " << std::endl;
	}

	if (green) {
		std::cout << " You Can go Now ! " << std::endl;
	}
	else
	{
		std::cout << " You Cant Go Now !!" << std::endl;
	}
	// Printing out a bool
	// 1 >> true
	// 0 >> false
	std::cout << std::endl;
	std::cout << "Red Light =  " << Red << std::endl;
	std::cout << " Green Light = " << green << std::endl;
	// print out true and false
	std::cout << std::endl;
	std::cout << std::boolalpha; // force to give answer in true or false
	std::cout << " Red is =  " << Red << std::endl;
	std::cout << " Green is = " << green << std::endl;
	std::cout << " Size is = " << sizeof(Red) << std::endl; // 1 bytes
	std::cout << " Size is = " << sizeof(green) << std::endl;// 1 bytes 
	return 0;
}


// LEC 13 = Characters and Text
// Example
int main() {
	char ahmed{ 'a' }; // 1 byte
	char omar{ 'O' };
	char mohamed{ 'M' };
	std::cout << "Mohamed start with an Letter ?  Answer =  " << mohamed << std::endl;
	char value = 110; // Type a Character using digits
	std::cout << " Char is  " << value << std::endl; 
	// using char and want it as digit  
	std::cout << " Real Value is  " << static_cast<int>(value) << std::endl;
	//example 2
	char value2 = 75;
	std::cout << " Value with char  " << value2 << std::endl;
	std::cout << " Value with Digits " << static_cast<int>(value2) << std::endl;
	return 0;
}

// LEC 14 = Auto Keyword
// Example
int main() {
	auto var1{ 12 };
	auto var2{ 13.0 };
	auto var3{ 14.0f };
	auto var4{ 15.0l };
	auto var5{ 'e' };

	//int modifier suffixes
	auto var6{ 123u };
	auto var7{ 123ul };
	auto var8{ 123ull };
	std::cout << " Var1 : " << sizeof(var1) << "bytes" << std::endl;//4 bytes
	std::cout << " Var2 : " << sizeof(var2) << "bytes" << std::endl;//8 bytes
	std::cout << " Var3 : " << sizeof(var3) << "bytes" << std::endl;//4 bytes
	std::cout << " Var4 : " << sizeof(var4) << "bytes" << std::endl;//8 bytes
	std::cout << " Var5 : " << sizeof(var5) << "bytes" << std::endl;//1 bytes
	std::cout << " Var6 : " << sizeof(var6) << "bytes" << std::endl;//4 bytes
	std::cout << " Var7 : " << sizeof(var7) << "bytes" << std::endl;//4 bytes
	std::cout << " Var8 : " << sizeof(var8) << "bytes" << std::endl;//8 bytes
	return 0;

}

// LEC 15 = Assignments
// Example
int main() {
	int var1{ 1234 }; // Declare and initialize
	std::cout << " Var1 is : " << var1 << std::endl;
	var1 = 32; // Assign
	std::cout << "Var 1 again is ; " << var1 << std::endl;
	// Example 2
	bool state{ false };
	std::cout << std::boolalpha;
	std::cout << "state ; " << state << std::endl;
	state = true;
	std::cout << " state again is ; " << state << std::endl;
	// Careful about auto assignments
	auto var3{ 333u };
	var3 = -22;
	std::cout << "Var1 is ; " << var3 << std::endl;
	return 0;
}

// LEC 16 ( Chapter 3) = Operations on Data

# Operations Examples
(Add - subtract - divide - modulus - decrement - multiply - built in utilities - formatting - increment)

# Basic Operation ( add - subtract - divide - modulus - multiply )

int main() {
	int n1{ 31 };
	int n2{ 32 };
	int n3{ 33 };
	int sum{ n1 + n2 };
	int othersum{ n1 + n2 + n3 + n1 };
	std::cout << " Sum is ; " << sum << std::endl;
	std::cout << " Sum is ; " << othersum << std::endl;
	int divide{ n1 / n2 };
	std::cout << " Divide is ; " << divide << std::endl;
	int multy{ n1 * n2 * n3 };
	std::cout << " Multi ; " << multy << std::endl;
	int subtract{ n1 - n2 };
	std::cout << " Sub is ; " << subtract << std::endl;
	int modulus{ n1 % n2 };
	std::cout << " Modulus ; " << modulus << std::endl;
	return 0;
}

// LEC 17 = Precedence and Associativity

# priority operators in c++

1) Multiplication
2) Division
3) Modulus		(LEFT TO Right)
4) Add
5) Substract

// Example
int main() {
	int a{ 3 };
	int b{ 6 };
	int c{ 10 };
	int d{ 4 };
	int e{ 9 };
	int f{ 8 };
	int g{ 5 };
	
	int result = a + b * c - d / e - f + g; // 9 +  60 - 6 - 0.44 - 8 + 5 = 60 
	std::cout << " result is ; " << result << std::endl;
	result = a / b * c + d - e + f; // 0.5 / 60 + 4 - 9 + 8 = 3     
	std::cout << " result is ; " << result << std::endl;
	// Force precedence ()
	result = (a + b) * c - d / e - f + g; // 90 - 0.44 - 8 + 5 = 86.56 = 87 ( Fractional Not allowed )
	std::cout << "result agian = " << result << std::endl;
	return 0;
}

// LEC 18 = Prefix and Postfix + and -
// Example
int main() {
	// Regular Increment and Decrement
	int value{ 5 };
	//Increment by one
	value = value + 1;
	std::cout << "Value is  " << value << std::endl;
	value = 5; // Reset value to 5
	//Decrement by one 
	value = value - 1;
	std::cout << "Value is = " << value << std::endl;
	value = 5;
	//Increment and Decrement by using other method ! (postfix)
	std::cout << "Value is " << value++ << std::endl;
	std::cout << "Value is " << value << std::endl;
	value = 5;
	std::cout << " Value is " << value-- << std::endl;
	std::cout << " Value is " << value << std::endl;
	// Other method to increment and decrement (prefix)
	value = 5;
	++value;
	std::cout << "Value is " << value << std::endl;
	value = 5;
	--value;
	std::cout << "Value is " << value << std::endl;
	return 0;
} 

// LEC 19 = Compound Operators
// Example
int main() {
	int value{ 45 };
	std::cout << "Value is ; " << value << std::endl;
	value += 5;					  
	std::cout << "Value is ; " << value << std::endl;
	value -= 5;					  		 
	std::cout << "Value is ; " << value << std::endl;
	value *= 5;					   		
	std::cout << "Value is ; " << value << std::endl;
	value /= 5;					   		 
	std::cout << "Value is ; " << value << std::endl;
	value %= 5;					   		 
	std::cout << "Value is ; " << value << std::endl;
	return 0;
} 

// LEC 20 = Relational Operators : Comparing Stuff
// Example
int main() {
	int n1{ 30 };
	int n2{ 40 };
	std::cout << "Numeber 1 is ; " << n1 << std::endl;
	std::cout << "Number 2 is ; " << n2 << std::endl;
	std::cout << std::endl;
	std::cout << " Comparing Values " << std::endl;
	std::cout << std::boolalpha;
	std::cout << "Number 1 < Number 2 " << (n1 < n2 )<< std::endl;
	std::cout << "Number 2 <= Number 2 " <<( n1 <= n2) << std::endl;
	std::cout << "Numeber 1 > Number 2 " <<( n1 > n2)<< std::endl;
	std::cout << "Number 1 >= Number 2 " <<( n1 >= n2) << std::endl;
	std::cout << "Number 1 == Number 2 " <<( n1 == n2) << std::endl;
	std::cout << "Number 1 != Numebr 2 " << (n1 != n2) << std::endl;
	bool result{ n1 < n2 };
	std::cout << n1 << "<" << n2 <<  " = " << result << std::endl;
	return 0;
}

// LEC 21 = Logical Operators
// Example
int main() {
	bool a{false};
	bool b{ true };
	bool c{ true };
	std::cout << std::boolalpha;
	//AND
	std::cout << "a && b = " << (a && b) << std::endl; // False
	std::cout << "c && b = " << (c && b) << std::endl; // true
	std::cout << "a && c && b = " << (a && c && b) << std::endl;// True
	//OR
	std::cout << "a || b = " << (a || b) << std::endl; // true
	std::cout << "c || b = " << (c || b) << std::endl;// true
	std::cout << "a || c || b = " << (a || c || b) << std::endl;//true
	//NOT
	std::cout << "a != a = " << (!a) << std::endl;// true
	std::cout << "c != c = " << (!c) << std::endl;// false
	std::cout << "b != b  " << ( !b) << std::endl;// false
	//Combine Two of them
	std::cout << "!(a&&b) || c : " << (!(a && b) || c) << std::endl; // True
	std::cout << std::endl;
	std::cout << "-------------------------------" << std::endl;
	
	//Example 2
	int d{ 45 };
	int e{ 20 };
	int f{ 10 };
	std::cout << "(d > e) && (d > f ) : " << ((d > e) && (d > f)) << std::endl; // true - true = true
	std::cout << "(d == e) && (d > f ) : " << ((d == e) || (d <= f)) << std::endl; // false - false = false
	std::cout << "(d == e) && (d > f ) : " << ((d < e) || (d > f)) << std::endl; // false - true = true
	std::cout << "(!a) && (d == e ) : " << ((!a) && (d == e)) << std::endl; // true - false = false
	return 0;
}

// LEC 22 = Output Formatting
// Example
int main() {
	// \n represent std::endl;
	std::cout << "Hello brother\n";
	std::cout << "Hello bruder\n";

	std::cout << " ----------------------------- " << std::endl;
	// std::setw() = formatted table
	std::cout << std::setw(10) << "Lastname" << std::setw(10) << "Firstname" << std::setw(5) << "Age" << std::endl;
	std::cout << std::setw(10) << "Omar" << std::setw(10) << "Abbas" << std::setw(5) << "19" << std::endl;
	std::cout << std::setw(10) << "Mohamed" << std::setw(10) << "Abbas" << std::setw(5) << "20" << std::endl;
	std::cout << std::setw(10) << "Youssef" << std::setw(10) << "Abbas" << std::setw(5) << "22" << std::endl;
	std::cout << std::setw(10) << "CMXI EXE" << std::setw(10) << "GAMER" << std::setw(5) << "19" << std::endl;
	std::cout << std::setw(10) << "exe" << std::setw(10) << "91" << std::setw(5) << "25" << std::endl;

	std::cout << "-------------------------------------------------" << std::endl;
	// std::setw() with a variable 
	int width = 20;
	std::cout << std::right;
	std::cout << std::setw(width) << "Lastname" << std::setw(width) << "Firstname" << std::setw(width) << std::endl;
	std::cout << std::setw(width) << "Omar1" << std::setw(width) << "EXE1" << std::setw(width) << std::endl;
	std::cout << std::setw(width) << "Omar2" << std::setw(width) << "EXE2" << std::setw(width) << std::endl;
	std::cout << std::setw(width) << "Omar3" << std::setw(width) << "EXE3" << std::setw(width) << std::endl;
	std::cout << "========================================================" << std::endl;
	// std::setfill(); = The fill Character
	std::cout << std::setfill('-');
	std::cout << std::setw(width) << "Firstname" << std::setw(width) << "Lastname" << std::endl;
	std::cout << std::setw(width) << "SyaJ" << std::setw(width) << "Fane" << std::endl;
	std::cout << std::setw(width) << "Sora" << std::setw(width) << "Famel" << std::endl;
	// std::showpos = it shows the sign of number
	std::cout << "============================" << std::endl;
	std::cout << std::endl;
	int n1{ 4532 };
	int n2{ -4532 };
	double n3{ 43.92 };
	std::cout << std::showpos;
	std::cout << "Positive is = " << n1 << std::endl;
	std::cout << "Negative is = " << n2 << std::endl;
	std::cout << std::endl;
	std::cout << std::noshowpos;
	std::cout << "Positive is = " << n1 << std::endl;
	std::cout << "Negative is = " << n2 << std::endl;
	// std::dec , std::hex , std::oct = number systems
	std::cout << "--------------------------------" << std::endl;
	std::cout << "Hex of N1 = " << std::hex << n1 << std::endl;
	std::cout << "Hex of N2* = " << std::hex << n2 << std::endl;
	std::cout << "Dec of N2 = " << std::dec << n2 << std::endl;
	std::cout << "Oct of N3 = " << std::oct << n3 << std::endl;
	std::cout << std::endl;
	// std::showbase/no = show the base for integral types
	std::cout << std::showbase;
	std::cout << "n1 base = " << std::hex << n1 << std::endl;
	std::cout << "n2 base = " << std::oct << n2 << std::endl;
	std::cout << std::endl;
	// std::uppercase; = Capital Letters
	std::cout << std::uppercase;
	std::cout << "#UpperCase Example\n";
	std::cout << "n1 base = " << std::hex << n1 << std::endl;
	std::cout << "n2 base = " << std::oct << n2 << std::endl;
	std::cout << std::endl;
	// std::fixed = fixed numbers
	double a{ 43.0 };
	std::cout << std::fixed;
	std::cout << "#Fixed Example " << std::endl;
	std::cout << "Number is  " << a << std::endl;
	// std::showpoint/no
	double d{ 34.1 };
	double e{ 101.99 };
	double f{ 12.0 };
	std::cout << std::endl;
	std::cout << std::noshowpoint;
	std::cout << "#NoShowPoint Example" << std::endl;
	std::cout << " d number is = " << d << std::endl;
	std::cout << " e number is = " << e << std::endl;
	std::cout << " f number is = " << f << std::endl;
	std::cout << std::endl;
	std::cout << "#Showpoint Example" << std::endl;
	std::cout << std::showpoint;
	std::cout << " d number is = " << d << std::endl;
	std::cout << " e number is = " << e << std::endl;
	std::cout << " f number is = " << f << std::endl;
	std::cout << std::endl;	
	// std::flush = flushes the output buffer to its final destination.
	std::cout << "This is a nice Message  !" << std::endl << std::flush;
	return 0;

}

 // LEC 23 = Numric Limits
// Example
/int main() { // you can use it to know the range of (any variable input)
	std::cout << "The range of short  " << std::numeric_limits<short>::min() << " to " << std::numeric_limits<short> ::max() << std::endl;
	std::cout << "The range of int " << std::numeric_limits<int> ::min() << " to " << std::numeric_limits<int>::max() << std::endl;
}

// LEC 24 = Math Functions
// Example
int main() {
	double w{ 7.7 };
	double e{ -32.311 };
	//floor
	std::cout << "W to floor " << std::floor(w) << std::endl;
	//ceil
	std::cout << "W to ceil " << std::ceil(w) << std::endl;
	//abs = absolute
	std::cout << "Double without N " << std::abs(e) << std::endl;
	//exp: f(x) = e^x , where e = 2.71828
	double exp = std::exp(10);
	std::cout << " Exp = " << exp << std::endl;
	//pow = power
	std::cout << " 6^9 = " << std::pow(6, 9) << std::endl;
	std::cout << " 2^2 = " << std::pow(2, 2) << std::endl;
	//sqrt = square root
	std::cout << "Square root of 91 = " << std::sqrt(91) << std::endl;
	//round . Halfway points are rounded aways from 0. 2,5 is rounded to 5 for example
	std::cout << " 3.654 rounded to : " << std::round(3.654) << std::endl;
	std::cout << " 2.5 rounded to : " << std::round(2.5) << std::endl;
	std::cout << " 2.4 rounded to : " << std::round(2.4) << std::endl;
	// Trig functions (sin - sinf - sinl - cos - cosf - cosl - tan - tanf - tanl - asin - asinf - asinl - acos - acosf - acosl - atan - atanf - atanl - atan2 - atan2f - atan2l)

	//log , log10
	std::cout << "Log ; to get 54.59 , you would elevate e to the power of : " << std::log(54.59) << std::endl;
	std::cout << "To get 1000 , you would need to elevate 10 to the power of : " << std::log10(10000) << std::endl;
} 

// LEC 25 = Weird Integral Types
// Example
int main() {
	short int var1{ 10 };
	short int var2{ 20 };
	char var3{ 40 };
	char var4{ 50 };
	std::cout << "Size of Var 1 ; " << sizeof(var1) << std::endl; // 2 byte
	std::cout << "Size of Var 2 ; " << sizeof(var2) << std::endl; // 2 byte
	std::cout << "Size of Var 3 ; " << sizeof(var3) << std::endl; // 1 byte
	std::cout << "Size of Var 4 ; " << sizeof(var4) << std::endl; // 1 byte
	auto result1 = var1 + var2;
	auto result2 = var3 + var4;
	std::cout << "Result of Size is ; " << sizeof(result1) << std::endl;// 4 byte
	std::cout << "Result of 2 Size is ; " << sizeof(result2) << std::endl;// 4 byte
}
	

// LEC 26 = IF Statement     {Flow Control Introduction (Chapter 4 Flow Control : Conditional Programming)}
// Example
int main() {
	int n1{ 55 };
	int n2{ 60 };
	bool result = n1 < n2;
	std::cout << std::boolalpha;
	std::cout << "Result : " << result <<  std::endl;
	std::cout << std::endl;
	std::cout << "Free standing if statement " << std::endl;
	//if(result){
	if (result == true) {
		std::cout << n1 << " is less than " << n2 << std::endl;
	}
	//if(!result){
	if (!(result == true)) {
		std::cout << n1 << " is NOT Less than "<< n2 << std::endl;
	}
	// Using else 
	std::cout << std::endl;
	std::cout << " ELSE " << std::endl;
	if (result == true) {
		std::cout << n1 << " is less than " << n2 << std::endl;
	}
	else {
		std::cout << n1 << " Is not less than " << n2 << std::endl;
	}
	std::cout << std::endl;
	std::cout << "-----------------------------------------------------" << std::endl;
	std::cout << std::endl;
	// Example 2 IF STATMENT
	bool red = false;
	bool green = true;
	bool yellow = false;
	bool police_stop = true;
	if (red) {
		std::cout << " STOP Now ! " << std::endl;
	}
	if (green) {
		std::cout << " GO Now ! " << std::endl;
	}
	if (yellow) {
		std::cout << "Slow Down it will be red " << std::endl;
	}
	// Nested Conditions
	std::cout << std::endl;
	std::cout << "Police officer stops " << std::endl;
	if (green) {
		if (police_stop) {
			std::cout << "Stop NOW !" << std::endl;
		}
		else
		{
		std::cout << "Go now ! " << std::endl;
		}
	}
	std::cout << std::endl;
	// Nested Method #2 (Alternative)
	std::cout << "Police officer stops " << std::endl;
	if (green && !police_stop) {
		std::cout << "Go" << std::endl;
	}
	else
	{
		std::cout << "Stop" << std::endl;
	}
}

// LEC 27 = Else IF
// Example
int main() {
	//Tools
	const int Pen{10};
	const int Marker{20};
	const int Eraser{30};
	const int Rectangel{40};
	const int Circle{50};
	const int  Ellipse{60};
	int tool{ 60 };
	if (tool == Pen) {
		std::cout << "Active tool is Pen" << std::endl;
	}
	else if (tool == Marker) {
		std::cout << "Active tool is Marker" << std::endl;
	}
	else if (tool == Eraser) {
		std::cout << "Active tool is Eraser" << std::endl;
	}
	else if (tool == Rectangel) {
		std::cout << "Active tool is Rectangel" << std::endl;
	}
	else if (tool == Circle) {
		std::cout << "Active tool is Circle" << std::endl;
	}
	else if (tool == Ellipse) {
		std::cout << "Active tool is Ellipse" << std::endl;
	}
}

// LEC 28 = Switch
// Example
int main() {
	//Tools
	const int Pen{ 10 };
	const int Marker{ 20 };
	const int Eraser{ 30 };
	const int Rectangel{ 40 };
	const int Circle{ 50 };
	const int  Ellipse{ 60 };
	int tool{ Pen };
	switch (tool) {
	case Pen: {
		std::cout << "Active Tool is Pen" << std::endl;
	}break;
	case Marker: {
		std::cout << "Active tool is Marker" << std::endl;
	}break;
	default: {
		std::cout << "Cant match any of tools" << std::endl;
	}
	}
}

// LEC 29 = Ternary Operators
// Example
int main() {
	// Normal If else
	int max{};
	int a{ 50 };
	int b{ 40 };
	if (a > b) {
		max = a;
	}
	else {
		max = b;
	}
	std::cout << "Max is = " << max << std::endl;
	std::cout << std::endl;
	// Ternary Expression = result = (condition) ? option1 : option2 ;
	max = (a > b) ? a : b;
	std::cout << "Max is = " << max << std::endl;
	std::cout << "=================================================" << std::endl;
	// Ternary Initilization
	std::cout << std::endl;
	std::cout << "Speed" << std::endl;
	bool fast = false;
	int speed{ fast ? 300 : 150 };
	std::cout << "The speed is : " << speed << std::endl;
}

// LEC 30 =  for loop   (Chapter 5 Loops )
// Example
int main() {
	// for (size_t i = 0; i < length; i++)
	// use size_t : a representation of some unsigned int for positive numbers [Sizes] and its 8 Byte
	for (unsigned int i = 0; i < 5; i++)
	{
		std::cout << "Omar ABBas YA " << std::endl;
	}
	for (unsigned int i{ 0 }; i < 10; ++i) {
		std::cout << "Hello brother" << std::endl;
	}
	// Operation inside the body of loop
	for (unsigned int i{ 0 }; i < 10; ++i) {
		std::cout << "i : " << i << ". Double that and you get " << 2 * i << std::endl;
	}
	std::cout << std::endl;
	size_t j{0}; // Iterator defined outside
	for ( j; j < 20; j++)
	{
		std::cout << j << " : Hello" << std::endl;
	}
	std::cout << j << std::endl;
	std::cout << std::endl;
	// Dont Hard code Values , USE Variable const
	const size_t count{ 50 };
	for (size_t i = 0; i < count; i++)
	{
		std::cout << "Dadaaaa" << std::endl;
	}
	std::cout << count << std::endl;
}

// LEC 31 = While loop
// Example
int main() {
	const unsigned int count{ 10 };
	unsigned int i{ 0 };
	while (i < count)
	{
		std::cout << "Hello brother " << std::endl; ++i;
	}
}

// LEC 32 = Do While Loops
// Example
int main() {
	const unsigned int count{ 10 };
	unsigned int i{ 0 };
	do
	{
		std::cout << "[" << i << "] ; I Love myself" << std::endl;
		++i;
	} while (i<count);
}

// LEC 33 = Declaring and Using Arrays  (CHAPTER 6 Arrays)
// Example
int main() {
	// #ARRAYS Store ELEMENTS From the Same TYPE ! IMPORTANT
	// Declaring an array
	int scores[10]; // array storing 10 integers but with garbage data
	// Reading values
	std::cout << std::endl;
	std::cout << " Reading " << std::endl;
	std::cout << "Scores[0] : " << scores[0] << std::endl;
	std::cout << "Scores[1] : " << scores[1] << std::endl;
	std::cout << "Scores[9] : " << scores[9] << std::endl;
	// can read through a loop
	for (size_t i = 0; i < 10; i++)
	{
		std::cout << "Scores [" << i << "] ; " << scores[i] << std::endl;
	}
	std::cout << std::endl;
	// Example of how to put data into array
	scores[0] = 30;
	scores[1] = 10;
	scores[2] = 31;
	scores[4] = 50;
	scores[3] = 23;
	int result = scores[3] + scores[4];
	std::cout << "What the result of 3 and 4 ; " << result << std::endl;
	std::cout << std::endl;
	std::cout << "Number 0 ; " << scores[0] << std::endl;
	std::cout << std::endl;
	for (size_t i = 0; i < 5; i++)
	{
		std::cout << std::setw(10) << i << " : Hello bruder : " << scores[i] << std::endl;
	}
	// initialize the array at declaration
	std::cout << std::endl;
	double salary[5]{ 12.7,13.2,7.5,8.1,9.3 };
	for (size_t i = 0; i < 5; i++)
	{
		std::cout << "Salary [" << i << "] ; " << salary[i] << std::endl;
	}
	// Omit the size of array at declaration
	int class_omar[] {10, 22, 310, 30, 19};
	// will print this with a range based for a loop
	for (auto value : class_omar)
	{
		std::cout << "Value  : " << value << std::endl;
	}
	// omit with const
	const int omar[]{ 10, 22, 310, 30, 19 };
	// you cant edit element with constant numebr
	// Sum up scores array,  Store result in sum
	int _ama[]{ 3,3,3,3,3,3,3,3,3,3 };
	int sum{ 0 };
	for (int _ama : _ama) {
		sum += _ama;
	}
	std::cout << "Score sum : " << sum << std::endl;
	return 0;
} 

// LEC 34 = Size of An Array
// Example
int main() {
	int score[]{ 13,4,5,1,3,7,86,41,3 };
	std::cout << " Size is " << std::size(score) << std::endl;
	for (size_t i = 0; i < std::size(score); i++)
	{
		std::cout << "Scores {" << i << "} : " << score[i] << std::endl;
	}
}	

// LEC 35 = Arrays of Characters
// Example
int main() {
	// Declare array
	char message[6]{'h','e','d','t','a','\0'};
	std::cout << "Message : ";
	for (auto c : message) {
		std::cout << c;
	}
	std::cout << std::endl;
	std::cout << "Size : " << std::size(message) << std::endl;
	// Can modify elements of the char array
	std::cout << std::endl;
	message[1] = 'o';
	std::cout << "Message : ";
	for (auto c : message) {
		std::cout << c;
	}
	std::cout << std::endl;
	// you cant print without null terminated 
	// if a character array is null it called c-string
	char message1[]{ 'H','e','l','l','o','\0'};
	std::cout << "Message  " << message1 << std::endl;
	std::cout << std::endl;
	// string Literal
	char message4[]{ "Hello brother" };
	std::cout << "Message 4  " << message4 << std::endl;
	// cant pring array with numbers like this 
	return 0;
}

// LEC 36 = Bounds of an Array
// Example
int main() {
	int numbers[]{ 1,2,3,4,5,6,7,8,9,0 };
	// Read beyond bounds : will read garbage or crash your program
	std::cout << "Numbers[12] : " << numbers[12] << std::endl;
	// Cant modify
	numbers[12] = 1000;
	std::cout << "12 : " << numbers[12] << std::endl;
}

// LEC 37 = Declaring and using Pointers ( Chapter 7 Pointers)
// Example
int main() {
	// Declaring pointers
	int* p_number{}; // can only store address
	double* p_fractional_number{};

	// Explicitely initilize to nullptr
	int* p_number1{ nullptr };
	int* p_fractional_number1{ nullptr };
	// All pointer variables have the same size

	// Assign data to pointer var
	int int_var{ 43 };
	int* p_int{&int_var};
	std::cout << "Int var : " << int_var << std::endl;
	std::cout << "p_int : " << p_int << std::endl;
	// you can also change stored data anytime
	int int_var1{ 65 };
	 int_var1 = 126;
	p_int = &int_var1;
	std::cout << "P_int : " << p_int << std::endl;
	std::cout << std::endl;
	int var2{ 300 };
	int* pointer{ &var2 };
	std::cout << "Address : " << pointer << std::endl;
	std::cout << std::endl;
	double pointer1{ 33.91 };
	double* p1{ &pointer1 };
	std::cout << "P1 : " << p1 << std::endl;
	std::cout << std::endl;
	// Size of pointer // 8 byte
	std::cout << "Size of int " << sizeof(int) << std::endl;
	std::cout << "Size of *int " << sizeof(int*) << std::endl;
	std::cout << "Size of p_int " << sizeof(p_int) << std::endl;
	std::cout << "Size of P1 " << sizeof(p1) << std::endl;
	std::cout << "Size of double " << sizeof(pointer1) << std::endl;
	std::cout << std::endl;

} 

// LEC 38 = Pointer to Char
// Example
int main() {
	char* Pointer{ nullptr };
	char point{ 'A' };
	Pointer = &point;
	std::cout << "Pointer : " << *Pointer << std::endl;
	std::cout << std::endl;
	// initialize with string literal
	const char * p_message{"Hello World"};
	std::cout << "The message is : " << p_message << std::endl;
	std::cout << "The message is : " << *p_message << std::endl;
}
 

// LEC 40 = Dynamic Memory Allocation
// Example
/*int main() {
	// BAD THINGS DONT DO
	// Writing into unitialized pointer through dereference
	int* p_number2; // Junk Address : Could be anything
	*p_number2 = 55;// Writing into Junk address :BAD !
	std::cout << "P_number 2 " << p_number2 << std::endl;
	std::cout << "*pNumer 2 : " << *p_number2 << std::endl;

	// Initializing pointer to null
	int* p_number3{}; // Equivalent of Zero : Nullptr
	p_number3 = 33; // Bad CRASH  

	// Dynamic Heap Memory
	int* p_number4{nullptr};
	p_number4 = new int;
	*p_number4 = 77;
	std::cout << "Number is : " << p_number4 << std::endl;
	std::cout << "Number is : " << *p_number4 << std::endl;
	// Return memory to OS
	delete p_number4;
	// if we used Number4 again it  will crash after we deleted it 


}*/

// LEC 41 = Dangling Pointers
// Example
/*int main() {
	// Solution 1
	std::cout << "Solution  : " << std::endl;
	int* p_number5{};
	int* p_number6{ new int {56} };
	if (p_number6 != nullptr) {
		std::cout << "Number 6 : " << *p_number6 << std::endl;
	}
	// Solution 2
	std::cout << std::endl;
	std::cout << "Solution 2 " << std::endl;
	int* p_number7{ new int {82} };
	// Use the pointer however you want 
	std::cout << "Number 7 : " << p_number7 << " - " << *p_number7 << std::endl;
	delete p_number7;
	p_number7 = nullptr; // Reset the pointer
	// Check for nullptr before use
	if (p_number7 != nullptr) {
		std::cout << "Number 7 : " << *p_number7 << std::endl;
	}
	// Solution 3
	std::cout << std::endl;
	std::cout << "Solution 3 " << std::endl;
	int* p_number8{ new int {382} };// Master Pointer
	int* p_number9{ p_number8 };

	// Dereference the pointers and use them
	std::cout << "Number 8 : " << p_number8 << " - " << *p_number8 << std::endl;
	if (p_number8 != nullptr) {
		std::cout << "Number 9 : " << p_number9 << " - " << *p_number9 << std::endl;
	}
	delete p_number8;//Master releasees the memory
	p_number8 = nullptr;
	if (p_number8 != nullptr) {
		std::cout << "Number 9 : " << p_number9 << " - " << *p_number9 << std::endl;
	}
	else
	{
		std::cerr << "WARNING : Trying to use invalid pointer" << std::endl;
	}
}*/

// LEC 42 = New int Fails
// Example
/*int main() {
	// Simulating memory allocation failure
	int* int1{ new int {1000000000000000000000} };
	// use huge loop to try and exhaust the memory
	for (size_t i = 0; i < 100000; i++)
	{
		int* int2{ new int{10000000} };
	}
			// Exception Mechanism
		for (size_t i = 0; i < 10000000000000; i++)
		{
			try {
				int* int3{ new int[100000000] };
		}catch(std::exception&ex){
			std::cout << "Cough exception : " << ex.what() << std::endl;
			// std::nothrow
			for (size_t i = 0; i < 10000000000000000; i++)
			{
				int* int4{ new(std::nothrow)int[1000000000] };
				if (int4 == nullptr) {
					std::cout << "Memory failed " << std::endl;
				}
				else
				{
					std::cout << "Memory Succeed" << std::endl;
				}
			}
}*/

// LEC 43 = Null Pointer Safety
// Example
/*int main() {
	// Verbose Nullptr check
	int* p_number{};//initialized to nullptr
	if (p_number != nullptr) {
		std::cout << "p_number is Valid Address : " << p_number << std::endl;
	}
	else
	{
		std::cout << "p_number is INVALID Address : " << std::endl;
	}
	delete p_number;
}*/

// LEC 44 = Memory Leaks
// Example
/*int main() {
	// Example1
	int* p_number{ new int {41} };

	// should delete and reset here

	int number{ 55 };// address 2
	p_number = &number;// now p_number points to address 2 and that called Memory Leaked.

	// Example 2 , Double allocation
	int* p_number1{ new int {45} };

	// Should delete and reset here


	p_number1 = new int{ 44 }; // Memory with int{45} Leaked.

	// Example 3 , Nested scopes 
	{
		int* p_number2{ new int { 57 } };
		// Should delete here 

		
	}
	// Memory with 57 Leaked
}*/

// LEC 45 = Dynamic Arrays
// Example
/*int main() {
	size_t size{ 10 };
	// Different ways you can declare an array
	double* p_salary{ new double[size] };// Salary array will contain garbage values
	int* p_students{ new(std::nothrow)int[size] {} }; // All values initialized to 0
	double* p_score{ new(std::nothrow)double[size] {1,2,3,4,5} };//Allocating memory space

	//Nullptr check and use the allocated array
	if (p_score) {
		std::cout << "Size of scores : " << sizeof(p_score) << std::endl;
		std::cout << "Succesfully Allocated memory for scores" << std::endl;
		// Print out elements
		for (size_t i = 0; i < size; i++)
		{
			std::cout << "Value : " << p_score[i] << " : " << *(p_score + i) << std::endl;
		}
	}

	delete[]p_salary;
	p_salary = nullptr;


	delete[]p_students;
	p_students = nullptr;

	delete[]p_score;
	p_score = nullptr;

	// Static vs Dynamic Arrays

	//Static
	int scores[10]{ 10,11,12,13,4,5,6,7,8,9 }; // lives on the stack
	std::cout << "Score size : " << std::size(scores) << std::endl;
	for (auto s : scores) {
		std::cout << "Value : " << s << std::endl;
	}
	// Dynamic arrays cant use std::size
	int* p_scores1 = new int[10]{1,2,3,4,5,6,7,8,9,10}; // Lives on the heap
}*/

// LEC 46 = Declaring and Using References (CHAPTER 8 References)
// Example
int main() {
	int value{ 45 };
	double valuedouble{ 33.65 };
	//References (&)
	int& reference_to_int_value_1{value};// initialization
	int& reference_to_int_value_2 = value; // Assignment
	double& reference_to_double_value3{ valuedouble };
	// You have to declare and initialize in one statement
	// int& some_reference; // ERROR
	std::cout << "Value : " << value << std::endl;
	std::cout << "Double Value : " << valuedouble << std::endl;
	std::cout << "Reference to Value 1 : " << reference_to_int_value_1 << std::endl;
	std::cout << "Reference to Value 2 : " << reference_to_int_value_2 << std::endl;
	std::cout << "Double Reference to Value 3 : " << reference_to_double_value3 << std::endl;
	std::cout << "&Value : " << &value << std::endl;
	std::cout << "&Value Double : " << &valuedouble << std::endl;
	std::cout << "&Reference to Value 1  : " << &reference_to_int_value_1 << std::endl;
	std::cout << "&Reference to value 2  : " << &reference_to_int_value_2 << std::endl;
	std::cout << "&Reference to value 3  : " << &reference_to_double_value3 << std::endl;
	std::cout << "Size of &int : " << sizeof(int&) << std::endl;
	std::cout << "Size of &double : " << sizeof(double&) << std::endl;
	std::cout << "Size of Reference to Value 1 : " << sizeof(reference_to_int_value_1) << std::endl;
	return 0;
} 

LEC 47 = Comparing References to Pointers

#References

* Dont use Dereferencing for reading and writing
* Cant be changed to reference something else
* Must be initialized at declaration

#Pointers

* Must go through dereference operator to read/write through pointed to value 
* Can be changed to point somewhere else
* Can be declared uninitialized (Will contain Garbage addresses)

// Example
int main() {
	//Declare pointer and reference
	double double_value{ 12.34 };
	double* p_doublevalue {&double_value};//Pointer
	double& re_doublevalue{ double_value };//Reference
	
	// Reading
	std::cout << "Double_value : " << double_value << std::endl;
	std::cout << "Ref Double value : " << re_doublevalue << std::endl;
	std::cout << "p_doublevalue : " << p_doublevalue << std::endl;
	std::cout << "*p_doublevalue : " << *p_doublevalue << std::endl;

	// Writing Through pointer
	*p_doublevalue = 15.44;
	std::cout << std::endl;
	std::cout << "----------------------" << std::endl;
	std::cout << "double_value : " << double_value << std::endl;
	std::cout << "Re Double value : " << re_doublevalue << std::endl;
	std::cout << "P_doubleValue : " << p_doublevalue << std::endl;
	std::cout << "*P_doubleValue : " << *p_doublevalue << std::endl;

	// Writing Through Reference 
	re_doublevalue = 18.44;
	std::cout << std::endl;
	std::cout << "----------------------" << std::endl;
	std::cout << "double_value : " << double_value << std::endl;
	std::cout << "Re Double value : " << re_doublevalue << std::endl;
	std::cout << "P_doubleValue : " << p_doublevalue << std::endl;
	std::cout << "*P_doubleValue : " << *p_doublevalue << std::endl;

	// Cant Reference Something else
	std::cout << std::endl;
	std::cout << "----------------------" << std::endl;
	std::cout << "Reference Something ELSE! " << std::endl;
	double some_other_double{ 78.45 };
	re_doublevalue = some_other_double; // Address STILL THE SAME 
	std::cout << "double_value : " << double_value << std::endl;
	std::cout << "Re Double value : " << re_doublevalue << std::endl;
	std::cout << "P_doubleValue : " << p_doublevalue << std::endl;
	std::cout << "*P_doubleValue : " << *p_doublevalue << std::endl;
	// Pointer point something else
	p_doublevalue = &some_other_double;
	std::cout << std::endl;
	std::cout << "----------------------" << std::endl;
	std::cout << "Point Something ELSE! " << std::endl;
	std::cout << "double_value : " << double_value << std::endl;
	std::cout << "Re Double value : " << re_doublevalue << std::endl;
	std::cout << "P_doubleValue : " << p_doublevalue << std::endl;
	std::cout << "*P_doubleValue : " << *p_doublevalue << std::endl;
	std::cout << "&double_value : " << &double_value << std::endl;
	std::cout << "&Ref_double value : " << &re_doublevalue << std::endl;

	std::cout << std::endl;
	std::cout << "----------------------" << std::endl;
	*p_doublevalue = 555.5;
	std::cout << "double_value : " << double_value << std::endl;
	std::cout << "Re Double value : " << re_doublevalue << std::endl;
	std::cout << "P_doubleValue : " << p_doublevalue << std::endl;
	std::cout << "*P_doubleValue : " << *p_doublevalue << std::endl;
	std::cout << "&double_value : " << &double_value << std::endl;
	std::cout << "&Ref_double value : " << &re_doublevalue << std::endl;

}

// LEC 48 = References And Const
// Example
int main() {
	// Const Reference
	std::cout << "Const Reference " << std::endl;
	int age{ 30 };
	const int& const_RefAge{ age };
	std::cout << "Age : " << age << std::endl;
	std::cout << "ConstRefAge : " << const_RefAge << std::endl;
	//Try to Modify through const reference = ERROR
	//const_RefAge = 31;

	//Duplicate Const reference behavior with pointers
	const int* const const_ptr{ &age };
	// *const_ptr = 32; ERROR
}

// LEC 49 = Character Manipulation (CHAPTER 9 STRINGS AND Character Manipulation)
// Example
int main() {
	//Check if Character is alphanumeric
	std::cout << "std::isalnum : " << std::endl;
	std::cout << "C is alphanumeric : " << std::isalnum('c') << std::endl;
	std::cout << "^ is alphanumeric : " << std::isalnum('^') << std::endl;

	// Can use this as a test condition
	char input_char{ '*' };
	if (std::isalnum(input_char)) {
		std::cout << input_char << " is alphanumeric. " << std::endl;
	}
	else
	{
		std::cout << input_char << " is not alphanumeric. " << std::endl;
	}
	std::cout << std::endl;
	// Check if Character is Alphabetic
	std::cout << "C is Alphabetic : " << std::isalpha('C') << std::endl;
	std::cout << "^ is Alphabetic : " << std::isalpha('^') << std::endl;
	std::cout << "7 is Alphabetic : " << std::isalpha('7') << std::endl;
	char inputValue{ 'H' };
	if (std::isalpha(inputValue)){
		std::cout <<inputValue<< " : is Alpha"<<std::endl;
	}
	else
	{
		std::cout <<inputValue<< " : is not Alpha"<<std::endl;
	}
	std::cout << std::endl;
	// Check if Character is Blank
	char message[]{ "Hello There " };
	std::cout << "Message : " << message << std:: endl;
	//Find and Print Blank index
	int blank_count{};
	for (size_t i = 0; i < std::size(message); i++)
	{
		if (std::isblank(message[i])) {
			std::cout << "Found a Blank character : [" << i << "]" << std::endl; ++blank_count;
		}
		
	}
	std::cout << "IN total we Found : " << blank_count << " Blank Characters." << std::endl;
	std::cout << std::endl;
	// Check if character is Uppercase or LowerCase
	char though[]{ "The C++ Programming Language is one of the most used on the Planet" };
	int lowercase_count{};
	int uppercase_count{};
	// Print original string for case of comparison on the terminal
	std::cout << "Original String : " << though << std::endl;
	for (auto character : though) {
		if (std::islower(character)) {
			std::cout << "  " << character; lowercase_count++;
		}
		if (std::isupper(character)) {
			++uppercase_count;
		}
	}
	std::cout << std::endl;
	std::cout << "Found " << lowercase_count << "Lowercase Characters and " << uppercase_count << " uppercase characters. " << std::endl;
	std::cout << std::endl;
	// Check if Character is a Digit
	std::cout << std::endl;
	std::cout << "*******************************************************" << std::endl;
	char state[]{ "Mr Hamilton owns 221 cows. Thats a lot of cows ! The kid exclamed ." };
	std::cout << "State: " << state << std::endl;
	size_t digitcount{};
	for (auto character : state) {
		if (std::isdigit(character)) {
			std::cout << "Found digit : " << character << std::endl; ++digitcount;
		}
	}
	std::cout << "Found " << digitcount << " digits in the statement string" << std::endl;
	return 0;
}
// LEC 50 = C-String Manipulation
// Example
int main() {
	// std::strlen : Find the length of a string
	const char message1[]{ "The sky is blue." };
	// Array decays into pointer when we use const char
	const char* message2{ "The sky is blue." };
	std::cout << "Message1 : " << message1 << std::endl;
	//strlen ignores nuill Character
	std::cout << "strlen1 : " << std::strlen(message1) << std::endl;
	//Includes the null character
	std::cout << "Sizeof1 : " << sizeof(message1) << std::endl;
	//strlen still works with decayed arrays
	std::cout << "strlen2 : " << std::strlen(message2) << std::endl;
	// Print sizeof pointer
	std::cout << "Sizeof2 : " << sizeof(message2) << std::endl;
	std::cout << std::endl;
	std::cout << "----------------------------------------" << std::endl;
	//std::strcmp : Comparing strings
	// Returns Negative value if lhs appears before rhs in lexicographical order
	//Zero if lhs and rhs compare equal.
	//positive value if lhs appears after rhs in lexicographical order.
	std::cout << "std::strcmp :" << std::endl;
	const char* string1{ "Alabama" };
	const char* string2{ "Blabama" };
	// Print out the comparison
	std::cout << "std::strcmp (" << string1 << "," << string2 << ") : " << std::strcmp(string1, string2) << std::endl;
	string1 = "Alabama";
	string2 = "Alabamb";
	// Print out the comparison
	std::cout << "std::strcmp (" << string1 << "," << string2 << ") : " << std::strcmp(string1, string2) << std::endl;
	string1 = "Alacama";
	string2 = "Alabama";
	std::cout << std::endl;
	std::cout << "----------------------------------------" << std::endl;
	// std::strchr : find first occurrence
	// Find the first occurrence of a character
	std::cout << "std::strchr : " << std::endl;
	// We use std::strchr to find all the characters one by one.
	const char* str{ "Try not. Do, or do not . There is no try." };
	char target = 'T';
	const char* result = str;
	int repeat{};

	while ((result = std::strchr(result, target)) != nullptr) {
		std::cout << "Found : " << target << " Starting at : " << result << std::endl; ++result; ++repeat;
	}
	std::cout << "Repeats : " << repeat << std::endl;
	return 0;
}

// ATM APP BREAK FROM LEC
/*void showMenu() {
	std::cout << "*********Welcome to ABBAS NationalBank*********" << std::endl;
	std::cout << "1.CheckBalance" << std::endl;
	std::cout << "2.Deposit" << std::endl;
	std::cout << "3.Withdrawal" << std::endl;
	std::cout << "4.Exit" << std::endl;
	std::cout << "*********Menu*********" << std::endl;
}
int main() {
	int option{};
	double balance = 10000;
	do {
		showMenu();
		std::cout << "Option: ";
		std::cin >> option;
		system("cls");
		switch (option)
		{
		case 1:std::cout << "Balance is: " << balance << " $" << std::endl; break;
		case 2:std::cout << "Deposit amount: " << std::endl;
			double depositAmount;
			std::cin >> depositAmount;
			balance += depositAmount;
			break;
		case 3:std::cout << "Withdraw Amount : " << std::endl;
			double withdrawAmount;
			std::cin >> withdrawAmount;
			if (withdrawAmount <= balance)
				balance -= withdrawAmount;
			else
			{
				std::cout << "Not Enough Money" << std::endl;
			}break;
		}
	} while (option!=4);
}*/


// ATM FAWRY Made By OMAR ! #2

void ShowMenu() {
	std::cout << "Welcome To our ATM" << std::endl;
	std::cout << "------------------" << std::endl;
	std::cout << "1.CheckBalance" << std::endl;
	std::cout << "2.Deposit" << std::endl;
	std::cout << "3.Withdrawal" << std::endl;
	std::cout << "4.Send to VodaphoneCash" << std::endl;
	std::cout << "5.PrepaidCard Maker" << std::endl;
	std::cout << "6.Exit" << std::endl;
	std::cout << "------------------" << std::endl;
}
int main() {
	int option{};
	double balance{ 32000 };
	double prepaid{53721113411};
	int cvv{ 307 };
	double ExpiredYear{ 2027 };
	double ExpiryMonth{ 11 };
	do {
		ShowMenu();
		std::cout << "Option : ";
		std::cin >> option;
		system("cls");
		switch (option)
		{
		case 1: std::cout << "Balance is : " << balance << " $" << std::endl;
			break;
		case 2: std::cout << "Deposit Money : " << std::endl;
			double depositAmount;
			std::cin >> depositAmount;
			balance += depositAmount;
			break;
		case 3: std::cout << "Withdrawal Amount : " << std::endl;
			double withdrawalAmount;
			std::cin >> withdrawalAmount;
			if (withdrawalAmount <= balance) {
				balance -= withdrawalAmount;
			}
			else
			{
				std::cout << "You dont have enough money sorry" << std::endl;
			}
			break;
		case 4: std::cout << "Please Write Card Number of receiver : " << std::endl;
			int card;
			std::cin >> card;
			std::cout << "How much you want to send him " << std::endl;
			double sent;
			std::cin >> sent;
			if (sent <= balance) {
				balance -= sent;
			}
			else
			{
				std::cout << "Sorry you dont have enough money" << std::endl;
			}
			if (sent <= balance) {
				std::cout << "Money sent Success" << std::endl;
			}break;
		case 5: std::cout << "Creating New PrepaidCard to you : " <<std::setprecision(15)<< prepaid << std::endl;
			int press;
			std::cout << "Press 2 to get CVV and Expiry " << std::endl;
			std::cin >> press;
			if (press == 2) {
				std::cout << "Your CVV Is : " << cvv << std::endl;
				std::cout << "Your Expiry : " << ExpiryMonth << "/"<<ExpiredYear << std::endl;
			}
			else {
				std::cout << "Wrong Number,TryAgain " << std::endl;
				std::cin >> press;
				if (press == 2) {
					std::cout << "Your CVV Is : " << cvv << std::endl;
					std::cout << "Your Expiry : " << ExpiryMonth << "/" << ExpiredYear << std::endl;
				}
				else {
					std::cerr << "Error(0x3133333) TryAgain Later!" << std::endl;
				}
				if (press != 2) {
					return 0;
				}

			}
			std::cout << "How Much money you want to put in YOUR PrepaidCard " << std::endl;
			double pre;
			std::cin >> pre;
			if (pre <= balance) {
				balance -= pre;
			}
			else
			{
				std::cout << "You dont have enough money" << std::endl;
			}break;
		}
	} while (option != 6);
}
